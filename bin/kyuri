#!/usr/bin/env node

var path   = require('path'),
    fs     = require('fs'),
    events = require('events');

featureFileExt = /\.(feature)$/;
stepsDirs = ['steps', 'step_definitions'];
envDirs = ['support'];

var inspect = require('eyes').inspector({
  stream: null,
  styles: { string: 'grey', regexp: 'grey' }
});

var kyuri = require('../lib/kyuri');

var help = [
  "usage: kyuri [FILE, ...]"
].join('\n');

var root = process.cwd();

/**
  Load .js files found in the directory or subdirectories of the feature files,
  adding exports to the steps array (if any).
*/
var _loadJavascripts = function (directory, steps) {
  if (!directory.match(/^\//)) {
    directory = path.join(root, directory);
  }

  if (fs.existsSync(directory)) {
    var files = fs.readdirSync(directory);
    files.forEach(function (file) {
      var fullPath = path.join(directory, file),
          stats = fs.statSync(fullPath),
          exported;
    
      if (stats.isDirectory()) {
        return _loadJavascripts(fullPath, steps);
      } 

      if (file.match(/\.js$/)) {
        // Add root to all relative paths
        if (!fullPath.match(/^\//)) {
          fullPath = path.join(root, fullPath);
        }
        exported = require(fullPath);
        if (exported && exported.forEach && steps) {
          exported.forEach(function (obj) {
            steps.push(obj); // Pass-by-reference array must be modified in place
          })
        }
      }
    }); 
  }
};

// Get rid of process runner
// ('node' in most cases)
var arg, args = [], argv = process.argv.slice(2);

kyuri.runner = kyuri.runners.cucumber;

var features = [];
var steps = [];
var directories = [];

argv.forEach(function (file) {
  var stat = fs.statSync(file),
      files;

  if (stat.isDirectory()) {
    files = fs.readdirSync(file);
    for (var i = 0; i < files.length; i++) {
      // Add the path
      files[i] = path.join(file, files[i]);
    }
  } 
  else {
    files = [file];
  }
  
  files.forEach(function (file) {
    if (file.match(featureFileExt)) {
      // Load envDirs first and without steps
      if (directories.indexOf(path.dirname(file)) === (-1)) {
        directories.push(path.dirname(file));
      }
      features.push(kyuri.parse(fs.readFileSync(file).toString()));
    }
  });
});

directories.forEach(function (top) {
  // Load environments first
  envDirs.forEach(function (dir) {
    _loadJavascripts(path.join(top, dir)); 
  });

  // Load steps
  stepsDirs.forEach(function (dir) {
    _loadJavascripts(path.join(top, dir), steps);
  });
});


var complete = false;

try {
  kyuri.runners.cucumber.run(features, steps, function () {
    complete = true;
  });
} 
catch (err) {
  console.log('Errors');
  if (err.stack) {
    console.log(err.stack);
  } 
  else {
    console.log(err);
  } 
  complete = true;
}

var _waitComplete = function () {
  if (!complete) {
    process.nextTick(_waitComplete);
  }
};

_waitComplete();
